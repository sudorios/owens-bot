// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement()) 
  userId   BigInt  @unique                     
  username String

  events Event[]
  guildUsers GuildUser[]
  userScores EventScore[]
  predictions Predictions[]
}

model Guild {
  id      Int    @id @default(autoincrement()) 
  guildId BigInt @unique                      
  name String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  events    Event[]     
  guildUsers GuildUser[]
  eventScores EventScore[]
  predictions Predictions[]
}

model GuildUser {
  id            Int      @id @default(autoincrement()) 
  guild         Guild    @relation(fields: [guildId], references: [id])
  guildId       Int
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  role          String
  points        Int      @default(0)
  lastPosition  Int      @default(0)
  position      Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([guildId, userId])
  @@index([guildId])
  @@index([userId])
}

model Event {
  id         Int      @id @default(autoincrement()) 
  guild      Guild    @relation(fields: [guildId], references: [id])
  guildId    Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  name       String
  state      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([guildId])
  @@index([userId])

  eventsScores EventScore[]
  questions    Questions[]
  predictions  Predictions[]
}


model EventScore {
  id         Int      @id @default(autoincrement()) 
  userId    Int
  user       User     @relation(fields: [userId], references: [id])
  guildId   Int
  guild     Guild    @relation(fields: [guildId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

model Questions {
  id         Int      @id @default(autoincrement()) 
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  question  String
  answer    String
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  predictions Predictions[]
}

model Predictions {
  id         Int      @id @default(autoincrement()) 
userId   Int
  user       User     @relation(fields: [userId], references: [id])
  guildId   Int
  guild     Guild    @relation(fields: [guildId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
questionId Int
  question  Questions @relation(fields: [questionId], references: [id])
  answer    String
  accuracy  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, guildId, eventId])
}
