// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  userId   BigInt @unique
  username String

  events        Event[]
  guildUsers    GuildUser[]
  userScores    EventScore[]
  predictions   Prediction[]
  seasonsScores SeasonScore[]
  eventRatings EventRating[]
  matchRatings MatchRating[]
}

model Guild {
  id       Int      @id @default(autoincrement())
  guildId  BigInt   @unique
  name     String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  events        Event[]
  guildUsers    GuildUser[]
  eventScores   EventScore[]
  predictions   Prediction[]
  seasons       Season[]
  seasonsScores SeasonScore[]
  eventRatings EventRating[]
  matchRatings MatchRating[]
}

model GuildUser {
  id           Int      @id @default(autoincrement())
  guild        Guild    @relation(fields: [guildId], references: [id])
  guildId      Int
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  role         String
  points       Int      @default(0)
  lastPosition Int      @default(0)
  position     Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([guildId, userId])
  @@index([guildId])
  @@index([userId])
}

model Event {
  id        Int      @id @default(autoincrement())
  guild     Guild    @relation(fields: [guildId], references: [id])
  guildId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  state     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  eventsScores EventScore[]
  questions    Question[]
  predictions  Prediction[]
  eventRatings EventRating[]

  @@index([guildId])
  @@index([userId])
}

model EventScore {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  guildId   Int
  guild     Guild    @relation(fields: [guildId], references: [id])
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id])
  question  String
  answer    String?
  points    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String?
  predictions Prediction[]
}

model Prediction {
  id         Int       @id @default(autoincrement())
  userId     Int
  user       User      @relation(fields: [userId], references: [id])
  guildId    Int
  guild      Guild     @relation(fields: [guildId], references: [id])
  eventId    Int
  event      Event     @relation(fields: [eventId], references: [id])
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  answer     String
  accuracy   Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

}

model Season {
  id        Int      @id @default(autoincrement())
  guildId   Int
  guild     Guild    @relation(fields: [guildId], references: [id])
  name      String
  startDate DateTime @default(now())
  endDate   DateTime @default(now())
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Seasons_Score SeasonScore[]
}

model SeasonScore {
  id          Int      @id @default(autoincrement())
  seasonId    Int
  season      Season  @relation(fields: [seasonId], references: [id])
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  guildId     Int
  guild       Guild    @relation(fields: [guildId], references: [id])
  totalPoints Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EventRating {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  guildId Int
  guild Guild @relation(fields: [guildId], references: [id])
  eventId Int
  event Event @relation(fields: [eventId], references: [id])
  rating    Decimal  @db.Decimal(3, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MatchRating {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id])
  guildId Int
  guild Guild @relation(fields: [guildId], references: [id])
  matchId String
  rating   Decimal  @db.Decimal(3, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, guildId, matchId])
  @@index([userId])
}